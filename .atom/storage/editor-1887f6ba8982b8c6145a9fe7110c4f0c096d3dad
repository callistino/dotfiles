{"mode":"editor","version":1,"windowDimensions":{"x":1440,"y":-701,"width":1920,"height":1174},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/rpelayo/Documents/Development/VoyagerWebService","buffers":[{"text":"// Generated on 2013-11-11 using generator-webapp 0.4.4\n'use strict';\n\n// # Globbing\n// for performance reasons we're only matching one level down:\n// 'test/spec/{,*/}*.js'\n// use this if you want to recursively match all subfolders:\n// 'test/spec/**/*.js'\n\nmodule.exports = function (grunt) {\n    // show elapsed time at the end\n    require('time-grunt')(grunt);\n    // load all grunt tasks\n    require('load-grunt-tasks')(grunt);\n\n    grunt.initConfig({\n        // configurable paths\n        yeoman: {\n            app: 'app',\n            dist: 'dist'\n        },\n        prompt: {\n            debug: {\n                options: {\n                    questions: [\n                        {\n                            config: 'name',\n                            type: 'confirm',\n                            message: 'Continue build?',\n                            default: 'true'\n                        }\n                    ]\n                }\n            }\n        },\n        watch: {\n            compass: {\n                files: ['<%= yeoman.app %>/styles/{,*/}*.{scss,sass}'],\n                tasks: ['compass:server', 'autoprefixer']\n            },\n            styles: {\n                files: ['<%= yeoman.app %>/styles/{,*/}*.css'],\n                tasks: ['copy:styles', 'autoprefixer']\n            },\n            livereload: {\n                options: {\n                    livereload: '<%= connect.options.livereload %>'\n                },\n                files: [\n                    '{.tmp,<%= yeoman.app %>}/*.html',\n                    '{.tmp,<%= yeoman.app %>}/styles/{,*/}*.css',\n                    '{.tmp,<%= yeoman.app %>}/scripts/{,*/}*.js',\n                    '{.tmp,<%= yeoman.app %>}/images/{,*/}*.{gif,jpeg,jpg,png,svg,webp}'\n                ]\n            }\n        },\n        connect: {\n            options: {\n                port: 9001,\n                livereload: 35729,\n                // change this to '0.0.0.0' to access the server from outside\n                hostname: '0.0.0.0'\n            },\n            livereload: {\n                options: {\n                    open: true,\n                    base: [\n                        '.tmp',\n                        '<%= yeoman.app %>'\n                    ]\n                }\n            },\n            test: {\n                options: {\n                    base: [\n                        '.tmp',\n                        'test',\n                        '<%= yeoman.app %>'\n                    ]\n                }\n            },\n            dist: {\n                options: {\n                    open: true,\n                    base: '<%= yeoman.dist %>',\n                    livereload: false\n                }\n            }\n        },\n        clean: {\n            dist: {\n                files: [{\n                    dot: true,\n                    src: [\n                        '.tmp',\n                        '<%= yeoman.dist %>/*',\n                        '!<%= yeoman.dist %>/.git*'\n                    ]\n                }]\n            },\n            server: '.tmp'\n        },\n        jshint: {\n            options: {\n                jshintrc: '.jshintrc',\n                reporter: require('jshint-stylish')\n            },\n            all: [\n                'Gruntfile.js',\n                '<%= yeoman.app %>/scripts/{,*/}*.js',\n                '!<%= yeoman.app %>/scripts/vendor/*',\n                'test/spec/{,*/}*.js'\n            ]\n        },\n        mocha: {\n            all: {\n                options: {\n                    run: true,\n                    urls: ['http://<%= connect.test.options.hostname %>:<%= connect.test.options.port %>/index.html']\n                }\n            }\n        },\n        compass: {\n            options: {\n                sassDir: '<%= yeoman.app %>/styles',\n                cssDir: '.tmp/styles',\n                generatedImagesDir: '.tmp/images/generated',\n                imagesDir: '<%= yeoman.app %>/images',\n                javascriptsDir: '<%= yeoman.app %>/scripts',\n                fontsDir: '<%= yeoman.app %>/styles/fonts',\n                importPath: '<%= yeoman.app %>/bower_components',\n                httpImagesPath: '/images',\n                httpGeneratedImagesPath: '/images/generated',\n                httpFontsPath: '/styles/fonts',\n                relativeAssets: false,\n                assetCacheBuster: false\n            },\n            dist: {\n                options: {\n                    generatedImagesDir: '<%= yeoman.dist %>/images/generated'\n                }\n            },\n            server: {\n                options: {\n                    debugInfo: true\n                }\n            }\n        },\n        autoprefixer: {\n            options: {\n                browsers: ['last 1 version']\n            },\n            dist: {\n                files: [{\n                    expand: true,\n                    cwd: '.tmp/styles/',\n                    src: '{,*/}*.css',\n                    dest: '.tmp/styles/'\n                }]\n            }\n        },\n        // not used since Uglify task does concat,\n        // but still available if needed\n        /*concat: {\n            dist: {}\n        },*/\n        // not enabled since usemin task does concat and uglify\n        // check index.html to edit your build targets\n        // enable this task if you prefer defining your build targets here\n        /*uglify: {\n            dist: {}\n        },*/\n        'bower-install': {\n            app: {\n                html: '<%= yeoman.app %>/index.html',\n                ignorePath: '<%= yeoman.app %>/'\n            }\n        },\n        rev: {\n            dist: {\n                files: {\n                    src: [\n                        '<%= yeoman.dist %>/scripts/{,*/}*.js',\n                        '<%= yeoman.dist %>/styles/{,*/}*.css',\n                    ]\n                }\n            }\n        },\n        useminPrepare: {\n            options: {\n                dest: '<%= yeoman.dist %>'\n            },\n            html: '<%= yeoman.app %>/index.html'\n        },\n        usemin: {\n            options: {\n                assetsDirs: ['<%= yeoman.dist %>']\n            },\n            html: ['<%= yeoman.dist %>/{,*/}*.html'],\n            css: ['<%= yeoman.dist %>/styles/{,*/}*.css']\n        },\n        imagemin: {\n            dist: {\n                files: [{\n                    expand: true,\n                    cwd: '<%= yeoman.app %>/images',\n                    src: '{,*/}*.{gif,jpeg,jpg,png}',\n                    dest: '<%= yeoman.dist %>/images'\n                }]\n            }\n        },\n        svgmin: {\n            dist: {\n                files: [{\n                    expand: true,\n                    cwd: '<%= yeoman.app %>/images',\n                    src: '{,*/}*.svg',\n                    dest: '<%= yeoman.dist %>/images'\n                }]\n            }\n        },\n        cssmin: {\n            // This task is pre-configured if you do not wish to use Usemin\n            // blocks for your CSS. By default, the Usemin block from your\n            // `index.html` will take care of minification, e.g.\n            //\n            //     <!-- build:css({.tmp,app}) styles/main.css -->\n            //\n            // dist: {\n            //     files: {\n            //         '<%= yeoman.dist %>/styles/main.css': [\n            //             '.tmp/styles/{,*/}*.css',\n            //             '<%= yeoman.app %>/styles/{,*/}*.css'\n            //         ]\n            //     }\n            // }\n        },\n        htmlmin: {\n            dist: {\n                options: {\n                    /*removeCommentsFromCDATA: true,\n                    // https://github.com/yeoman/grunt-usemin/issues/44\n                    //collapseWhitespace: true,\n                    collapseBooleanAttributes: true,\n                    removeAttributeQuotes: true,\n                    removeRedundantAttributes: true,\n                    useShortDoctype: true,\n                    removeEmptyAttributes: true,\n                    removeOptionalTags: true*/\n                },\n                files: [{\n                    expand: true,\n                    cwd: '<%= yeoman.app %>',\n                    src: '*.html',\n                    dest: '<%= yeoman.dist %>'\n                }]\n            }\n        },\n        // Put files not handled in other tasks here\n        copy: {\n            dist: {\n                files: [{\n                    expand: true,\n                    dot: true,\n                    cwd: '<%= yeoman.app %>',\n                    dest: '<%= yeoman.dist %>',\n                    src: [\n                        '*.{ico,png,txt}',\n                        '.htaccess',\n                        'images/{,*/}*.{webp,gif}',\n                        'styles/fonts/{,*/}*.*',\n                        'bower_components/sass-bootstrap/fonts/*.*'\n                    ]\n                }]\n            },\n            styles: {\n                expand: true,\n                dot: true,\n                cwd: '<%= yeoman.app %>/styles',\n                dest: '.tmp/styles/',\n                src: '{,*/}*.css'\n            }\n        },\n        modernizr: {\n            devFile: '<%= yeoman.app %>/bower_components/modernizr/modernizr.js',\n            outputFile: '<%= yeoman.dist %>/bower_components/modernizr/modernizr.js',\n            files: [\n                '<%= yeoman.dist %>/scripts/{,*/}*.js',\n                '<%= yeoman.dist %>/styles/{,*/}*.css',\n                '!<%= yeoman.dist %>/scripts/vendor/*'\n            ],\n            uglify: true\n        },\n        concurrent: {\n            server: [\n                'compass',\n                'copy:styles'\n            ],\n            test: [\n                'copy:styles'\n            ],\n            dist: [\n                'compass',\n                'copy:styles',\n                'imagemin',\n                'svgmin',\n                'htmlmin'\n            ]\n        },\n        preprocess: {\n            options: {\n                inline: true,\n                context: {\n                    DEBUG: false\n                }\n            },\n            html: {\n                src: ['<%= yeoman.dist %>/{,*/}*.html']\n            },\n            js: {\n                src: '.tmp/concat/scripts/*.js'\n            }\n        }\n    });\n\n    grunt.registerTask('serve', function (target) {\n        if (target === 'dist') {\n            return grunt.task.run(['build', 'connect:dist:keepalive']);\n        }\n\n        grunt.task.run([\n            'clean:server',\n            'concurrent:server',\n            'autoprefixer',\n            'connect:livereload',\n            'watch'\n        ]);\n    });\n\n    grunt.registerTask('server', function () {\n        grunt.log.warn('The `server` task has been deprecated. Use `grunt serve` to start a server.');\n        grunt.task.run(['serve']);\n    });\n\n    grunt.registerTask('test', [\n        'clean:server',\n        'concurrent:test',\n        'autoprefixer',\n        'connect:test',\n        'mocha'\n    ]);\n\n    grunt.registerTask('build', [\n        'clean:dist',\n        'useminPrepare',\n        'concurrent:dist',\n        'autoprefixer',\n        'concat',\n        'preprocess:js', // Remove DEBUG code from production builds\n        'preprocess:html', // Remove DEBUG code from production builds\n        'cssmin',\n        'uglify',\n        'modernizr',\n        'copy:dist',\n        'rev',\n        'usemin'\n    ]);\n\n    grunt.registerTask('default', [\n        'jshint',\n        'test',\n        'build'\n    ]);\n};\n","markers":{"markers":{"1":{"id":1,"range":[[31,21],[31,21]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":44,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/rpelayo/Documents/Development/VoyagerWebService/Gruntfile.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"e969a4322796e74402101e331554ba899da7882a","deserializer":"TextBuffer"},{"text":"{\n  \"name\": \"voyagerwebservice\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"grunt\": \"~0.4.2\",\n    \"grunt-contrib-copy\": \"~0.4.1\",\n    \"grunt-contrib-concat\": \"~0.3.0\",\n    \"grunt-contrib-uglify\": \"~0.2.7\",\n    \"grunt-contrib-compass\": \"~0.6.0\",\n    \"grunt-contrib-jshint\": \"~0.7.2\",\n    \"grunt-contrib-connect\": \"~0.5.0\",\n    \"grunt-contrib-clean\": \"~0.5.0\",\n    \"grunt-contrib-watch\": \"~0.5.3\",\n    \"grunt-contrib-cssmin\": \"~0.7.0\",\n    \"grunt-contrib-htmlmin\": \"~0.1.3\",\n    \"grunt-contrib-imagemin\": \"~0.3.0\",\n    \"grunt-svgmin\": \"~0.2.1\",\n    \"grunt-usemin\": \"~2.0.0\",\n    \"grunt-rev\": \"~0.1.0\",\n    \"grunt-autoprefixer\": \"~0.4.1\",\n    \"grunt-mocha\": \"~0.4.5\",\n    \"grunt-modernizr\": \"~0.4.1\",\n    \"grunt-concurrent\": \"~0.4.1\",\n    \"grunt-bower-install\": \"~0.7.0\",\n    \"grunt-prompt\": \"~0.1.2\",\n    \"load-grunt-tasks\": \"~0.2.0\",\n    \"time-grunt\": \"~0.2.3\",\n    \"jshint-stylish\": \"~0.1.3\",\n    \"grunt-preprocess\": \"~4.0.0\"\n  },\n  \"engines\": {\n    \"node\": \">=0.8.0\"\n  }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[33,3],[33,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":46,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/rpelayo/Documents/Development/VoyagerWebService/package.json","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"dc82f061fe222c54f47352c6f9c279c732465825","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":44,"softTabs":true,"scrollTop":6460,"scrollLeft":0,"displayBuffer":{"id":45,"softWrap":false,"editorWidthInChars":165,"tokenizedBuffer":{"bufferPath":"/Users/rpelayo/Documents/Development/VoyagerWebService/Gruntfile.js","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":46,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":47,"softWrap":false,"editorWidthInChars":170,"tokenizedBuffer":{"bufferPath":"/Users/rpelayo/Documents/Development/VoyagerWebService/package.json","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/rpelayo/Documents/Development/VoyagerWebService/Gruntfile.js","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"compass":{},"grunt-runner":{"taskList":{"items":["default","build","test","server"]}},"fuzzy-finder":{"/Users/rpelayo/Documents/Development/VoyagerWebService/Gruntfile.js":1396973469281,"/Users/rpelayo/Documents/Development/VoyagerWebService/package.json":1396973465597},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":75660693},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/rpelayo/Documents/Development/VoyagerWebService/Gruntfile.js","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}