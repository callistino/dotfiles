{"mode":"editor","version":1,"windowDimensions":{"x":1440,"y":-685,"width":1920,"height":1174},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/rpelayo/sites","buffers":[{"text":"#!/bin/sh\n\nechoColor=\"$(tput setaf 6)\"  # Cyan\npromptColor=\"$(tput setaf 1)\" # Light Gray\nnoColor=\"$(tput sgr 0)\"\ntempDir=$(mktemp -dt \"$0\")\n\nREMOTEPATH=/var/www/build\nCONFIG=~/.aws_sync.conf\nUSERNAME=rpelayo\nHOSTNAME=172.22.6.11\n\n# Check if config file exists\nif [ ! -f \"$CONFIG\" ]; then\n    #Defaults\n    PROJNAME=PIT\n\n    # Create config file\n    touch \"$CONFIG\"\n\n    echo \"${echoColor}No config file found, please enter project configuration:${noColor}\"\n\n    # Prompt and save PROJNAME\n    placeholder=\"$PROJNAME\"\n    read -e -p \"${promptColor}Enter project name [$PROJNAME]: ${noColor}\" PROJNAME\n    $PROJNAME=${PROJNAME:-$placeholder}\n    echo \"${echoColor}Project name is $PROJNAME${noColor}\"\n    echo \"PROJNAME=$PROJNAME\" > $CONFIG\n\n    # Prompt and save LOCALPATH\n    read -e -p \"${promptColor}Enter local workspace. This is where all your projects live. ${echoColor}(ABSOLUTE PATH)${promptColor}: ${noColor}\" LOCALPATH\n\n    # Clean up path\n    placeholder=\"${LOCALPATH: -1}\"\n    if [ $placeholder = \"/\" ]; then\n        LOCALPATH=\"${LOCALPATH%?}\"\n    fi\n    echo \"LOCALPATH=$LOCALPATH\" >> $CONFIG\nelse\n    # Read conf file\n    . $CONFIG\nfi\n\nif [ ! -e \"$LOCALPATH/$PROJNAME\" ]; then\n    read -e -p \"${promptColor}No folder found for ${echoColor}'$PROJNAME'${promptColor}, please enter project folder again: ${noColor}\" PROJNAME\nfi\n\n# Cleanup function when user quits the shell\nfunction cleanup {\n    # Close the ssh connection\n    echo \"${echoColor}Closing SSH session...${noColor}\"\n    ssh -o \"ControlPath=~/.ssh/%h.conn\" -O exit \"$HOSTNAME\"\n    $(rm -rf $tempDir)\n}\ntrap cleanup EXIT\n\nfunction uploadFile {\n    file=$1\n\n    # Only upload files not directories\n    if [[ ! -f \"$file\" ]]; then\n        return\n    fi\n\n    dirname=$(dirname $file)\n\n    echo \"${echoColor}Uploading ${promptColor}$file ${noColor}=>${promptColor} $HOSTNAME:$REMOTEPATH/$file ${noColor}\"\n\n    # Upload file to server\n    ssh -o \"ControlPath=~/.ssh/%h.conn\" \"$USERNAME@$HOSTNAME\" \"mkdir -p $REMOTEPATH/$dirname\" > /dev/null 2>&1\n    scp -o \"ControlPath=~/.ssh/%h.conn\" $2 -r \"$file\" \"$USERNAME@$HOSTNAME:$REMOTEPATH/$file\" > /dev/null 2>&1\n    # cat $file | ssh -o \"ControlPath=~/.ssh/%h.conn\" -t -t $USERNAME@$HOSTNAME \"mkdir -p $REMOTEPATH/$dirname\"\n\n    if (($? > 0)); then\n        echo \"${promptColor}Upload failed.\"\n    else\n        echo \"${echoColor}Upload complete.${noColor}\"\n    fi\n\n    # Update modification time on Config file to help on the search for new files.\n    touch $CONFIG\n\n    watch=true\n}\n\n# Change to the project directory\ncd \"$LOCALPATH/$PROJNAME/\"\n\n# Start ssh session with ControlPath config option\necho \"${echoColor}Starting SSH session to $HOSTNAME${noColor}\"\nssh -NfM -o \"ControlPath=~/.ssh/%h.conn\" \"$HOSTNAME\"\n\n# Find new files and save them\ngitFiles=$(git ls-files -m -o --exclude-standard)\necho \"$gitFiles\" >> \"$tempDir/gitFiles\"\n\n# Find file diff with remote branch \ncurrBranch=$(git rev-parse --abbrev-ref HEAD)\ngitFiles=$(git --no-pager diff --name-only origin/$currBranch)\necho \"$gitFiles\" >> \"$tempDir/gitFiles\"\ngitFiles=$(git submodule foreach -q 'echo $path/`git --no-pager diff --name-only origin/master`')\necho \"$gitFiles\" >> \"$tempDir/gitFiles\"\n\nif [[ -s \"$tempDir/gitFiles\" ]] ; then \n    echo \"${echoColor}Initial upload of untracked and modified files.${noColor}\"\n    # Remove duplicates and sort\n    $(sort -u \"$tempDir/gitFiles\" -o \"$tempDir/gitFiles\")\nfi\n\n# Upload Initial files \nfor file in $(cat \"$tempDir/gitFiles\"); do\n    uploadFile $file\ndone\n\nwatch=true\nwhile true; do\n    # Find files modified within the last 2 seconds\n    modFiles=$(find . -type f -mtime -2s ! -path \"*/.git/*\")\n\n    # Find new files\n    # currBranch=$(git rev-parse --abbrev-ref HEAD)\n    # gitFiles=\"$(git ls-files -m -o --exclude-standard) $(git --no-pager diff --name-only origin/$currBranch) $(git submodule foreach -q 'echo $path/`git --no-pager diff --name-only origin/master`')\"\n    # echo \"$gitFiles\" >> \"$tempDir/newGitFiles\"\n    # $(sort -u \"$tempDir/newGitFiles\" -o \"$tempDir/newGitFiles\")\n    # newFiles=$(comm -13 \"$tempDir/gitFiles\" \"sort -u $tempDir/newGitFiles\")\n    newFiles=$(find . -type f -newer $CONFIG ! -path \"*/.git/*\")\n\n    # Empty dirs and update new files\n    # $(rm -rf \"$tempDir/gitFiles\")\n    # $(rm -rf \"$tempDir/newGitFiles\")\n    # echo \"$gitFiles\" >> \"$tempDir/gitFiles\"\n\n    # Upload modified files\n    for file in $modFiles; do\n        uploadFile $file\n    done\n\n    # Upload new files\n    for file in $newFiles; do\n        uploadFile $file\n    done\n\n    if [[ $watch = true ]] ; then\n        echo \"${promptColor}Watching for file changes in ${echoColor}$LOCALPATH/$PROJNAME ${noColor} ...\"\n        watch=false\n    fi\n\n    # Wait for 1 seconds\n    sleep 1\ndone\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":24,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/rpelayo/sites/aws_scp","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"715a101c34c5937f5fb4f356d8fd4433612d614f","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":24,"softTabs":true,"displayBuffer":{"id":25,"softWrap":false,"editorWidthInChars":165,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/rpelayo/sites/aws_scp","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/rpelayo/sites/aws_scp","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"compass":{},"grunt-runner":{"taskList":{"items":[]}},"fuzzy-finder":{"/Users/rpelayo/sites/aws_scp":1399466861442},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":13670},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/rpelayo/sites/aws_scp","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}